config {
  type: "incremental",
  bigquery: {
    partitionBy: "timestamp_trunc(created_at, day)",
    updatePartitionFilter:
        "created_at >= timestamp_sub(current_timestamp(), interval 6 day)",
    clusterBy: ["shift_id"]
  }
}

pre_operations {
    DECLARE timestamp_checkpoint DEFAULT (
    ${when(incremental(),
    `SELECT timestamp(date_sub(current_date, interval 3 day))`,
    `SELECT timestamp("2025-05-01")`)}
  )
  }



-- Курьерские смены: смены, у которых role_id = 1 (Курьер) 
with _shifts as (
    select 
        id as shift_id,
        start_date as shift_start_dttm,
        end_date as shift_end_dttm,
        warehouse_id,
        role_id
    from ${ref("shifts")} as t1
    where start_date > timestamp_checkpoint
    and role_id = 1
),
-- История состояний курьеров во взятых курьерских сменах
_couriers_states as (
    select 
        employee_id,
        t1.shift_id,
        t1.created_at,
        case
            when reason_id is not null then name
            when type = 20  then 'working'
            when type = 30 then 'break'
            when type = 40 then 'working'
            when type = 50 then 'not_working' end as state,
        warehouse_id,
        null as batch_id
    from ${ref("employee_shift_status_history")}  as t1
    left join ${ref("shift_reasons")}  as t2
    on t1.reason_id = t2.id
    join _shifts as t3
    on t1.shift_id = t3.shift_id
    where t1.created_at > timestamp_checkpoint
    and type in (20, 30, 40, 50)
),

-- Заказы и батчи, в составе которых они были. Так-же количество заказов в батче
_batched_orders as (
    select 
        order_id,
        t2.batch_id,
        n_orders
    from ${ref("orders")} as t1
    left join (
        select 
            batch_id,
            count(*) as n_orders
        from ${ref("orders")}
        where created_at > timestamp_checkpoint
        group by 1
        ) as t2
    on t1.batch_id = t2.batch_id
    where t1.created_at > timestamp_checkpoint
),

-- История состояний заказов, которые были единственными в батче; с id доставлявшего курьера
_solo_order_state as (
    select 
        employee_id,
        null as shift_id,
        created_at,
        case
            when type = 'taken_by_courier' then 'on_order'
            when type = 'order_delivered' then 'back_to_warehouse'
            when type = 'back_to_warehouse' then 'working' end as state,
        null as warehouse_id,
        batch_id
    from (
        select 
            employee_id,
            type,
            batch_id,
            max(created_at) as created_at
        -- from {{ ref('stg_snp__order_status_history') }} as t1
        from ${ref("order_status_history")} as t1
        join (select order_id,
                    batch_id,
                    n_orders 
            from _batched_orders where n_orders = 1) as t2
        on t1.order_id = t2.order_id
        where type in ('taken_by_courier', 'order_delivered', 'back_to_warehouse')
        -- {% if is_incremental() %}
        --     and timestamp_trunc(created_at, day) in ({{ partitions_to_replace | join(',') }})
        -- {% else %}
        --     and created_at > '2021-06-01'
        -- {% endif %}
        and created_at > timestamp_checkpoint
        
        group by 1, 2, 3) as t1
),

-- История состояний заказов, которые были в батче с другими заказами; с id доставлявшего курьера
_batch_order_state as (
    select 
        employee_id,
        null as shift_id,
        created_at,
        case
            when type = 'taken_by_courier' then 'on_order'
            when type = 'order_delivered' then 'back_to_warehouse'
            when type = 'back_to_warehouse' then 'working' end as state,
        null as warehouse_id,
        batch_id
    from (
        select 
            employee_id,
            type,
            batch_id,
            max(created_at) as created_at
        -- from {{ ref('stg_snp__order_status_history') }} as t1
        from ${ref("order_status_history")} as t1
        join (select order_id,
                    batch_id,
                    n_orders 
             from _batched_orders where n_orders > 1) as t2
        on t1.order_id = t2.order_id
        where type in ('taken_by_courier', 'order_delivered', 'back_to_warehouse')
        -- {% if is_incremental() %}
        --     and timestamp_trunc(created_at, day) in ({{ partitions_to_replace | join(',') }})
        -- {% else %}
        --     and created_at > '2021-06-01'
        -- {% endif %}
        and created_at > timestamp_checkpoint
        group by 1, 2, 3) as t1
),

-- Объеденение истори состояний курьеров в сменах и историй состояний заказов, как в батче, так и единичных
_all_states as (
    select *
    from _couriers_states
    union all
    select *
    from _solo_order_state
    union all
    select *
    from _batch_order_state
),

-- Таблица статусов состояний курьера в смене, с номером "переключения" статуса, датой и временем "переключения" статуса
_prep as (
    select employee_id,
           first_value(shift_id)
               over (partition by employee_id, tech_field_shift order by created_at) as shift_id,
           created_at,
           first_value(state)
               over (partition by employee_id, tech_field_state order by created_at, state) as state,
           first_value(warehouse_id)
               over (partition by employee_id, tech_field_shift order by created_at) as warehouse_id,
           case when state = 'working' then null else batch_id end as batch_id,
           lead(created_at)
               over (partition by employee_id order by created_at) as next_create_at,
           tech_field_state
    from (
        select t1.*,
               sum(case when state is not null then 1 end)
                   over (partition by employee_id order by created_at) as tech_field_state,
               sum(case when shift_id is not null then 1 end)
                   over (partition by employee_id order by created_at) as tech_field_shift
        from _all_states as t1
        ) as t1   
)
-- -- проверка
-- select t1.*,
--        verifivcation_batch,
--        verifivcation_shift_employee
-- from (
--     select DATE_TRUNC(created_at, isoweek) as _w,
--            warehouse_id,
--            count(distinct shift_id || employee_id) as n_shift_employee,
--            count(distinct batch_id) as uniq_batch,
--            countif(state = 'on_order') as onorder_state
--     from _prep
--     group by 1, 2
--     ) as t1
-- join (
--     select DATE_TRUNC(created_at, isoweek) as _w,
--            warehouse_id,
--            count(distinct batch_id) as verifivcation_batch
--     from snp.orders
--     group by 1, 2
--     ) as t2
--         on t1._w = t2._w
--         and t1.warehouse_id = t2.warehouse_id
-- join (
--     select DATE_TRUNC(plan_shift_start, isoweek) as _w,
--            warehouse_id,
--            count(distinct shift_id || employee_id) as verifivcation_shift_employee
--     from analytics.mv_shift_agg
--     where role_id = 1
--         and paid_sh > 0
--     group by 1, 2
--     ) as t3
--         on t1._w = t3._w
--         and t1.warehouse_id = t3.warehouse_id
select *
from _prep

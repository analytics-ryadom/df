

pre_operations {
    DECLARE timestamp_checkpoint DEFAULT (
    ${when(incremental(),
    `SELECT timestamp(timestamp_sub(current_timestamp(), interval 3 day))`,
    `SELECT timestamp("2020-06-01")`)}
  )
  }

with _orders_cour as (
    select order_id,
           batch_id,
           courier_motivation_amount,
           warehouse_id,
           t1.address,
           t2.lat as wh_lat,
           t2.long as wh_long
    -- from snp.orders as t1
    from ${ref('stg_courier__orders')} as t1
    -- join snp.warehouses as t2
    join ${ref('stg_lavka__warehouses')} as t2
        on t1.warehouse_id = t2.id
    -- where t1.created_at >= '{0}'
    where t1.created_at >= timestamp_checkpoint
),
_orders_lavka as (
    select  id as order_id,
            user_id,
            lat as order_lat,
            long as order_long,
            paid_at,
            paid_at is not null as paid_flg,
            price / 100 as price,
            created_at,
    -- from snp.orders_lavka
    from ${ref('stg_lavka__orders_lavka')}
    -- where created_at >= '{0}'
    where created_at >= timestamp_checkpoint
),
_order_items as (
    select order_id,
           count(*) as n_items
    -- from snp.order_items
    from ${ref('stg_lavka__order_items')}
    -- where scanned_at >= '{0}'
    where scanned_at >= timestamp_checkpoint
    group by 1
),
_additional_order_items as (
    select order_id,
           count(case when ap.type = 'service_fee' then aoi.id end) > 0 as service_fee_purchase,
           count(case when ap.type = 'own_paid_delivery' then aoi.id end) > 0 as delivery_fee_purchase,
           sum(case when ap.type = 'service_fee' then aoi.price end)/100 as service_fee_price,
           sum(case when ap.type = 'own_paid_delivery' then aoi.price end)/100 as delivery_fee_price,
           sum(aoi.price)/100 as total_additional_price
    -- from snp.additional_order_items aoi
    from ${ref('stg_lavka__additional_order_items')} aoi
        -- join snp.additional_products ap on ap.id = aoi.product_id
        join ${ref('stg_lavka__additional_products')} ap on ap.id = aoi.product_id
    -- where aoi.created_at >= '{0}'
     where aoi.created_at >= timestamp_checkpoint
    group by 1
),
_orders as (
    select  *,
            ST_DISTANCE(
               ST_GEOGPOINT(cast(order_long as float64), cast(order_lat as float64)),
               ST_GEOGPOINT(cast(wh_long as float64), cast(wh_lat as float64))
               ) as order_distance
    from _orders_lavka as t1
    left join _orders_cour as t2
    using(order_id)
),
_motivation as (
    select order_id,
           t1.employee_rate_id,
           got_bonus,
           polygon_id,
           surge_bonus,
           surge_coefficient,
           t1.amount as money_bonus,
           from_eta,
           to_eta,
           cast(json_extract(t1.polygon_data, '$.regular.eta') as int)
               + coalesce(cast(json_extract(t1.polygon_data, '$.rain.eta') as int), 0) as eta,
           rider_coefficient as rider_x_coefficient
    from (
        select *
        -- from snp.courier_motivations
        from ${ref('stg_courier__courier_motivations')}
        -- where created_at >= '{0}'
        where created_at >= timestamp_checkpoint
         ) as t1
    -- left join snp.motivation_programs as t2
    left join ${ref('stg_courier__motivation_programs')} as t2
        on t1.motivation_program_id = t2.id
)
-- ,
-- _surge as (
--     select decision_made_at,
--            next_decision_at,
--            warehouse_id,
--            min_amount_enabled,
--            min_amount
--     -- from snp.surge_logs
--     from ${ref('stg_lavka_surge__surge_logs')}
--     -- where decision_made_at >= '{0}'
--     where decision_made_at >= timestamp_checkpoint
)
select  t1.order_id,
        t1.batch_id,
        t1.warehouse_id,
        batch_n,
        order_lat,
        order_long,
        wh_lat,
        wh_long,
        order_distance,
        price,
        n_items,
        t22.service_fee_purchase,
        t22.delivery_fee_purchase,
        coalesce(t22.service_fee_price, 0) as service_fee_price,
        coalesce(t22.delivery_fee_price, 0) as delivery_fee_price,
        coalesce(t22.total_additional_price, 0) as total_additional_price,
        t1.created_at,
        picker_id,
        courier_id as courier_delivered,
        paid_at,
        paid_flg,
        address,
        order_received,
        picker_assigned,
        TIMESTAMP_DIFF(picker_assigned, t1.created_at, second) as picker_assigned_seconds,
        picker_collecting,
        TIMESTAMP_DIFF(picker_collecting, picker_assigned, second) as picker_collecting_seconds,
        picker_collected,
        TIMESTAMP_DIFF(picker_collected, picker_collecting, second) as picker_collected_seconds,
        wait_batching,
        TIMESTAMP_DIFF(
           GREATEST(wait_batching, last_order_ready_for_delivery),
           order_ready_for_delivery,
           second
           ) as batching_wait_seconds,
        last_order_ready_for_delivery,
        courier_first_offer as courier_first_offer_dttm,
        courier_last_offer as courier_last_offer_dttm,
        TIMESTAMP_DIFF(courier_last_offer, last_order_ready_for_delivery, second) as no_courier_seconds,
        taken_by_courier as taken_dttm,
        order_delivered as order_delivered_dttm,
        TIMESTAMP_DIFF(order_delivered, taken_by_courier, second) as delivery_seconds,
        back_to_warehouse as back_to_warehouse_dttm,
        TIMESTAMP_DIFF(back_to_warehouse, order_delivered, second) as back_seconds,
        autofinish_flg,
        order_canceled,
        courier_motivation_amount, -- то какой бонус мы предложили
        employee_rate_id,
        got_bonus,
        polygon_id,
        surge_bonus,
        surge_coefficient,
        money_bonus,
        coalesce(from_eta, eta) as from_eta,
        to_eta,
        eta,
        rider_x_coefficient,
        min_amount_enabled as surge_enable,
        min_amount as min_check_amount,
        user_id
from _orders as t1
left join _order_items as t2
    on t1.order_id = t2.order_id
left join _additional_order_items t22
    on t1.order_id = t22.order_id
left join dds.order_statuses as t3
    on t1.order_id = t3.order_id
left join _motivation as t4
    on t1.order_id = t4.order_id
-- left join _surge as t5
--     on t1.warehouse_id = t5.warehouse_id
--     and t1.created_at >= t5.decision_made_at
--     and t1.created_at < t5.next_decision_at;
left join ${ref('int_surge_orders_mapping')} as t5
    on t1.order_id = t5.order_id 



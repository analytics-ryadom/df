config {
  type: 'incremental',
  uniqueKey: ["order_id", "created_at", "warehouse_id"],
  description: 'Intermediate orders table ',
  schema: 'mart',
  tags: ['mart', 'orders'],
  name: 'mart_orders',
  bigquery: {
    partitionBy: 'timestamp_trunc(created_at, day)',
    updatePartitionFilter: 'created_at >= timestamp_sub(current_timestamp(), interval 7 day)',
    clusterBy: ['warehouse_id']
  },
  
}

pre_operations {
    DECLARE timestamp_checkpoint DEFAULT (
    ${when(incremental(),
    `SELECT timestamp(timestamp_sub(${dataform.projectConfig.vars.execution_date}, interval 3 day))`,
    `SELECT timestamp("2023-01-01")`)}
  )
  }


select  t1.order_id,
        t1.batch_id,
        t1.warehouse_id,
        t3.batch_n,
        t1.order_lat,
        t1.order_long,
        t1.wh_lat,
        t1.wh_long,
        t1.order_distance,
        t1.price,
        t1.is_internal_order,
        t1.has_alcohol,
        t1.has_coffee,
        t1.has_tobacco,
        t1.has_energy_drinks,
        t2.n_items,
        t2.service_fee_purchase,
        t2.delivery_fee_purchase,
        coalesce(t2.service_fee_price, 0) as service_fee_price,
        coalesce(t2.delivery_fee_price, 0) as delivery_fee_price,
        coalesce(t2.total_additional_price, 0) as total_additional_price,
        t1.created_at,
        t3.picker_id,
        t3.courier_id as courier_delivered,
        t1.paid_at,
        t1.paid_flg,
        t1.address,
        t3.order_received,
        t3.picker_assigned,
        TIMESTAMP_DIFF(t3.picker_assigned, t1.created_at, second) as picker_assigned_seconds,
        t3.picker_collecting,
        TIMESTAMP_DIFF(t3.picker_collecting, t3.picker_assigned, second) as picker_collecting_seconds,
        t3.picker_collected,
        TIMESTAMP_DIFF(t3.picker_collected, t3.picker_collecting, second) as picker_collected_seconds,
        t3.wait_batching,
        TIMESTAMP_DIFF(
           GREATEST(t3.wait_batching, t3.last_order_ready_for_delivery),
           t3.order_ready_for_delivery,
           second
           ) as batching_wait_seconds,
        t3.last_order_ready_for_delivery,
        t3.courier_first_offer as courier_first_offer_dttm,
        t3.courier_last_offer as courier_last_offer_dttm,
        TIMESTAMP_DIFF(t3.courier_last_offer, t3.last_order_ready_for_delivery, second) as no_courier_seconds,
        t3.taken_by_courier as taken_dttm,
        t3.order_delivered as order_delivered_dttm,
        TIMESTAMP_DIFF(t3.order_delivered, t3.arrived_to_address, second) as delivery_seconds,
        t3.arrived_to_address as arrived_to_address_dttm,
        TIMESTAMP_DIFF(t3.arrived_to_address, t3.taken_by_courier, second) as arrived_seconds,
        t3.back_to_warehouse as back_to_warehouse_dttm,
        TIMESTAMP_DIFF(t3.back_to_warehouse, t3.order_delivered, second) as back_seconds,
        t3.autofinish_flg,
        t3.order_canceled,
        t3.batch_type,
        t3.max_quantity,
        t1.courier_motivation_amount, -- то какой бонус мы предложили
        t1.courier_motivation_time,
        t4.employee_rate_id,
        t4.got_bonus,
        t4.polygon_id,
        t4.surge_bonus,
        t4.surge_coefficient,
        -- t4.money_bonus,
        t4.amount,
        t4.paid_amount,
        t4.rider_coefficient,
        t4.paid_rider_coefficient,
        t4.shift_id,
        coalesce(t4.from_eta, t4.eta) as from_eta,
        t4.to_eta,
        t4.eta,
        -- t4.rider_x_coefficient,
        t5.min_amount_enabled as surge_enable,
        t5.min_amount as min_check_amount,
        t1.user_id,
        ROW_NUMBER() OVER(PARTITION BY t1.user_id ORDER BY t1.created_at) as order_num,
from ${ref('int_lavka_courier_orders')} as t1
left join ${ref('int_order_items')} as t2
    on t1.order_id = t2.order_id
left join ${ref('int_order_statuses')} as t3
    on t1.order_id = t3.order_id
left join ${ref('int_courier_motivations')} as t4
    on t1.order_id = t4.order_id
left join ${ref('int_surge_orders_mapping')} as t5
    on t1.order_id = t5.order_id 

where t1.created_at >= timestamp_checkpoint 



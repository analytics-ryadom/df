config {
  type: 'incremental',
  description: 'Mart for Growth part of Main Product Dashboard',
  schema: 'mart',
  tags: ['mart', 'product'],
  name: 'mart__product__main_dashboard__growth',
  bigquery: {
    partitionBy: 'calculation_date',
    updatePartitionFilter: 'calculation_date >= date_sub(current_date(), interval 6 day)',
    clusterBy: ['filtered_last_active_city_id']
  },
  
}

pre_operations {
  declare date_checkpoint date; 
  set date_checkpoint = (
    ${when(incremental(),
      `select date_sub(max(calculation_date), interval 3 day) from ${self()}`, 
      `select min(calculation_date) from ${ref('int__orders__moving_aggregation')}`, 
      )}
    );

    ${when(incremental(),
      `delete from ${self()} where calculation_date >= date_checkpoint`)
    }
  }

select
  aggregation_period,
  calculation_date,
  period_start,
  period_end,
  newbie_flag as period_newbie_flag,
  coalesce(last_device_operating_system, 'unknown') as filtered_last_device_operating_system,
  coalesce(safe_cast(last_media_source as string), 'unknown') as filtered_last_media_source,
  coalesce(safe_cast(last_active_city_id as string), 'unknown') as filtered_last_active_city_id,
  coalesce(safe_cast(last_active_warehouse_id as string), 'unknown') as filtered_last_active_warehouse_id,
  count(distinct user_id) as users_cnt,
  sum(active_user_flag) as active_users_cnt,
  sum(user_orders_cnt) as ttl_orders_in_the_period,
  sum(case when active_user_flag = 1 then user_orders_cnt else 0 end) as active_orders_cnt,
  sum(case when active_user_flag = 0 then user_orders_cnt else 0 end) as inactive_orders_cnt
from
    ${ref('int__orders__moving_aggregation')}
group by
  1,2,3,4,5,6,7,8,9

